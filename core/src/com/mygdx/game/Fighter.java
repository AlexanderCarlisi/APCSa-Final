package com.mygdx.game;

import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.Fixture;
import com.badlogic.gdx.physics.box2d.FixtureDef;

import java.util.HashMap;

/**
 * Fighter Class
 * 
 */
public class Fighter {

    /** Body Definition used for each Fighter. */
    private final BodyDef BODY_DEF = GDXHelper.generateBodyDef(BodyType.DynamicBody, new Vector2(0, 0));

    /** Name of the Character. */
    private final String m_name;

    /** The amount of force to apply to the Y Axis. */
    private final float m_jumpForce;

    /** Weight, effects Launch percent. Damage Calcs */
    private final float m_weight;

    /** Amount of Pixels to Move per Frame */
    private final float m_runSpeed;

    /** Height of the Fighter, same value fed into the Fixture Def. */
    private final float m_height;

    /** Width of the Fighter, same value fed into the Fixture Def. */
    private final float m_width;

    /** Body of the Fighter generated by the World. */
    private final Body m_body;

    /** Fixture of the Fighter generated by the Body. */
    private final Fixture m_fixture;

    /** Current health in Percent. */
    private float m_health;

    /** If the Fighter is still in the Battle. */
    public boolean isDead;
    

    /**
     * Constructor for the Fighter Class.
     * @param name 
     * @param runSpeed
     * @param jumpForce
     * @param weight
     * @param fixtureDef
     */
    public Fighter(String name, float runSpeed, float jumpForce, float weight, FixtureDef fixtureDef, float width, float height) {
        m_name = name;
        m_jumpForce = jumpForce;
        m_weight = weight;
        m_runSpeed = runSpeed;
        m_height = height;
        m_width = width;
        isDead = false;
        m_body = MyGdxGame.WORLD.createBody(BODY_DEF);
        m_fixture = m_body.createFixture(fixtureDef);
        m_fixture.setUserData(this); // Collider identifier
    }

    public String getName() {
        return m_name;
    }
    
    public float getHealth() {
        return m_health;
    }

    public void setHealth(float health) {
        m_health = health;
    }

    public float getJumpForce() {
        return m_jumpForce;
    }

    public float getWeight() {
        return m_weight;
    }

    public float getRunSpeed() {
        return m_runSpeed;
    }

    public Body getBody() {
        return m_body;
    }

    public Fixture getFixture() {
        return m_fixture;
    }

    public Vector2 getDimensions() {
        return new Vector2(m_width, m_height);
    }

    public void groundAttack(Attack.direction direction, boolean facingRight) {
        Vector2 pos = m_body.getPosition();
        switch(direction) {
            case Neutral: {
                new Attack(
                        this, 2.5f,
                        facingRight ? new Vector2(pos.x + 0.4f, pos.y) : new Vector2(pos.x - 0.4f, pos.y),
                        GDXHelper.PTM(20), GDXHelper.PTM(15), false);
                break;
            }
            case Side: {
                new Attack(
                        this, 3.3f,
                        facingRight ? new Vector2(pos.x + 0.5f, pos.y) : new Vector2(pos.x - 0.5f, pos.y),
                        GDXHelper.PTM(25), GDXHelper.PTM(10), false);
                break;
            }
            case Up: {
                new Attack(
                        this, 3.5f,
                        new Vector2(pos.x, pos.y + 0.4f),
                        GDXHelper.PTM(20), GDXHelper.PTM(10), false);
                break;
            }
            case Down: {
                new Attack(
                        this, 3,
                        new Vector2(pos.x, pos.y - 0.4f),
                        GDXHelper.PTM(20), GDXHelper.PTM(15), false);
                break;
            }
            default: {
                new Attack(
                        this, 2,
                        facingRight ? new Vector2(pos.x + 0.5f, pos.y) : new Vector2(pos.x - 0.5f, pos.y),
                        GDXHelper.PTM(20), GDXHelper.PTM(15), false);
                break;
            }
        }
    }

    // public static Fighter getFighter(int index) {
    //     return FIGHTERS[index];
    // }
   
}
